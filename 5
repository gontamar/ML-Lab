#titanic Dataset
import numpy as np
import pandas as pd
from sklearn.metrics import confusion_matrix
from sklearn.model_selection import train_test_split

class NaiveBayesClassifier: 
  def __init__(self): 
    self.prior = {}
    self.conditional = {}

  def fit(self, X, y):
    self.classes = np.unique(y)
    for c in self.classes: 
      self.prior[c] = np.mean(y == c)

    for feature in X.columns: 
      self.conditional[feature] = {} 
      for c in self.classes:
        feature_values = X[feature][y == c] 
        self.conditional[feature][c] = { 'mean': np.mean(feature_values),'std': np.std(feature_values) }

  def predict(self, X): 
    y_pred = []
    for _, sample in X.iterrows(): 
      probabilities = {}
      for c in self.classes:
        probabilities[c] = self.prior[c]
        for feature in X.columns:
          mean = self.conditional[feature][c]['mean']
          std = self.conditional[feature][c]['std']
          x = sample[feature]
          probabilities[c] *= self._gaussian_pdf(x, mean, std)
      y_pred.append(max(probabilities, key=probabilities.get)) 
    return y_pred

  def _gaussian_pdf(self, x, mean, std):
    exponent = np.exp(-((x - mean) ** 2) / (2 * std ** 2)) 
    return (1 / (np.sqrt(2 * np.pi) * std)) * exponent

df = pd.read_csv('titanic.csv')
df = df[['Survived', 'Pclass', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked']] 
df['Age'].fillna(df['Age'].median(), inplace=True) 
df['Fare'].fillna(df['Fare'].median(), inplace=True) 
df['Embarked'].fillna(df['Embarked'].mode()[0], inplace=True)
df['Embarked'] = df['Embarked'].map({'C': 0, 'Q': 1, 'S': 2}) 

train, test = train_test_split(df, test_size=0.2)

X_train = train.drop('Survived', axis=1) 
y_train = train['Survived']
X_test = test.drop('Survived', axis=1) 
y_test = test['Survived']

classifier = NaiveBayesClassifier() 
classifier.fit(X_train, y_train) 
y_pred = classifier.predict(X_test) 

cm = confusion_matrix(y_test, y_pred) 
print("Confusion Matrix:\n", cm)
accuracy = np.mean(y_pred == y_test) 
print("Accuracy:", accuracy)








#Iris Dataset
import numpy as np
import pandas as pd
import math
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, confusion_matrix

iris = pd.read_csv('Iris.csv')
species = {'Iris-setosa': 0, 'Iris-versicolor': 1, 'Iris-virginica': 2}
iris['Species'] = iris['Species'].map(species)

def divide_by_label(dataset):
    label_divided_data = {}
    for row in dataset:
        label = row[-1]
        if label not in label_divided_data:
            label_divided_data[label] = []
        label_divided_data[label].append(row[:-1])
    return label_divided_data

def calculate_mean(column):
    return np.mean(column)

def calculate_std_div(column):
    return np.std(column)

def calculate_mean_std_div_by_class(data):
    divided_dataset = divide_by_label(data)
    mean_std_by_label = {}
    for label, rows in divided_dataset.items():
        mean_std_by_label[label] = [(calculate_mean(col), calculate_std_div(col)) for col in np.array(rows).T]
    return mean_std_by_label

def calculate_prob_density(x, mean, std_div):
    if std_div == 0:
        return 0  # Handle division by zero gracefully
    exponent = math.exp(-((x - mean) ** 2) / (2 * std_div ** 2))
    return (1 / (math.sqrt(2 * math.pi) * std_div)) * exponent

def calculate_class_prob(mean_std_by_label, test_case):
    probabilities = {}
    for label, mean_std in mean_std_by_label.items():
        probabilities[label] = 1
        for i in range(len(mean_std)):
            mean, std_div = mean_std[i]
            x = test_case[i]
            probabilities[label] *= calculate_prob_density(x, mean, std_div)
    return probabilities

def predict_label(mean_std_by_label, test_case):
    probabilities = calculate_class_prob(mean_std_by_label, test_case)
    best_label, best_prob = None, -1
    for key, probability in probabilities.items():
        if best_label is None or probability > best_prob:
            best_prob = probability
            best_label = key
    return best_label

def naive_bayesian_classifier(training_set, test_set):
    mean_std_each_label = calculate_mean_std_div_by_class(training_set)
    predictions = []
    for test_case in test_set:
        pred = predict_label(mean_std_each_label, test_case)
        predictions.append(pred)
    return predictions

X = iris[['SepalLengthCm', 'SepalWidthCm', 'PetalLengthCm', 'PetalWidthCm']].values
y = iris['Species'].values
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

predicted_labels = naive_bayesian_classifier(X_train, X_test)

predicted_labels = np.array(predicted_labels, dtype=int)

accuracy = accuracy_score(predicted_labels, y_test)
print("Accuracy:", accuracy)
cm = confusion_matrix(predicted_labels, y_test)
print("Confusion Matrix:\n", cm)







#with sklearn
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB

df = pd.read_csv("TitanicDataset.csv")
df = df[['Survived', 'Pclass', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked']] 
df['Age'].fillna(df['Age'].median(), inplace=True) 
df['Fare'].fillna(df['Fare'].median(), inplace=True) 
df['Embarked'].fillna(df['Embarked'].mode()[0], inplace=True)
df['Embarked'] = df['Embarked'].map({'C': 0, 'Q': 1, 'S': 2}) 

train, test = train_test_split(df, test_size=0.2, random_state=42)

X_train = train.drop('Survived', axis=1) 
y_train = train['Survived']
X_test = test.drop('Survived', axis=1) 
y_test = test['Survived']

classifier = GaussianNB()
classifier.fit(X_train, y_train)

y_pred = classifier.predict(X_test)

cm = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:\n", cm)
accuracy = np.mean(y_pred == y_test)
print("Accuracy:", accuracy)

plt.figure(figsize=(10, 8))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm', fmt='.2f', linewidths=.5)
plt.title('Correlation Matrix Heatmap')
plt.show()

plt.figure(figsize=(6, 4))
sns.heatmap(cm, annot=True, cmap='Blues', fmt='d', cbar=False)
plt.xlabel('Predicted labels')
plt.ylabel('True labels')
plt.title('Confusion Matrix')
plt.show()
